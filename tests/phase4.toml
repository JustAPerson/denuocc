[suites.phase4]
passes = ["state_read_input", "phase1", "phase2", "phase3", "phase4"]
results_print = "pptokens_to_string"
results_compare = "assert_pptokens_loose_equal"


# Test that result of processing input is not empty. If it is, then the result
# of different inputs would compare equal causing this case to succeed when it
# should fail
[[suites.phase4.cases]]
input = ""
output = "no"
should_panic = true

################################################################################
# Macros
################################################################################

# Test just defining macros

[[suites.phase4.cases]]
input = "#define a"
output = ""

[[suites.phase4.cases]]
input = "#define test()"
output = ""

[[suites.phase4.cases]]
input = "#define test(a)"
output = ""

[[suites.phase4.cases]]
input = "#define test(...)"
output = ""

[[suites.phase4.cases]]
input = "#define test(a, b, ...)"
output = ""

################################################################################
# Test definition parsing errors and that they result in no definition
################################################################################

[[suites.phase4.cases]]
input = "#define\n"
messages = ["<case>:1:8: expected identifier token; found whitespace token"]

[[suites.phase4.cases]]
input = """
#define test(a b)
test(a)
"""
output = "test(a)"
messages = ["<case>:1:16: expected `,`; found `b`"]

[[suites.phase4.cases]]
input = """
#define test(..., a) __VA_ARGS__
test(a)
"""
output = "test(a)"
messages = ["<case>:1:17: expected `)`; found `,`"]

[[suites.phase4.cases]]
input = """
#define test(a,)
"""
messages = ["<case>:1:16: expected identifier or `...`; found `)`"]

[[suites.phase4.cases]]
input = "#define macro(a, a) a"
messages = ["<case>:1:18: macro parameter `a` repeated"]

[[suites.phase4.cases]]
input = """
#define one(a) ## a
#define two(a) a ##
"""
messages = [
  "<case>:1:16: a macro cannot begin nor end with `##`",
  "<case>:2:18: a macro cannot begin nor end with `##`",
]

[[suites.phase4.cases]]
input = """
#define one(a) # nonparam
#define two(a) #
#define three(a) # # a
"""
messages = [
  "<case>:1:16: the `#` operator must be followed by a macro parameter",
  "<case>:2:16: the `#` operator must be followed by a macro parameter",
  "<case>:3:18: the `#` operator must be followed by a macro parameter"
]

[[suites.phase4.cases]]
input = '''
#define stringy(a) # a
stringy(3 + 2)
stringy(  three   +   two  )
stringy("a" + "b")
'''
output = '''
"3 + 2"
"three + two"
"\"a\" + \"b\""
'''

[[suites.phase4.cases]]
input = '''
#define concat(a, b) a ## b
concat(one, two)
concat(one, 2)
concat(a, "2")
'''
output = """
onetwo
one2
"""
messages = [
  "<case>:4:1: concatenating `a` and `\"2\"` does not result in a valid preprocessor token",
]

[[suites.phase4.cases]]
input = '''
#define FUNC(a) a
FUNC(3
'''
messages = [
  "<case>:2:7: expected `)` to end invocation of macro `FUNC`",
  "<case>:2:5: macro `FUNC` invocation opened here",
]

################################################################################
# Test that redefinitions must be equal
################################################################################

[[suites.phase4.cases]]
input = """
#define test A B C
#define test A B C
#define test A  B   C
#define test different
"""
messages = [
  "<case>:4:9: macro `test` redefined differently",
  "<case>:1:9: macro `test` first defined here",
]

################################################################################
# Test expanding macros
################################################################################

[[suites.phase4.cases]]
input = """
#define abc def
abc abcdef
"""
output = "def abcdef"

[[suites.phase4.cases]]
input = """
#define z z[0]
z
"""
output = "z[0]"

[[suites.phase4.cases]]
input = """
#define test()
test()
"""
output = ""

[[suites.phase4.cases]]
input = """
#define func(a) a
func(1)
func (2)
func
(3)
func (
  4
)
"""
output = "1 2 3 4"

[[suites.phase4.cases]]
input = """
#define noparams() 123
noparams( )
"""
output = "123"

[[suites.phase4.cases]]
input = """
#define add(a, b) a + b
add(1, 3)
"""
output = "1 + 3"

[[suites.phase4.cases]]
input = """
#define object value
#define func() value
object(3)
func
"""
output = "value(3) func"

[[suites.phase4.cases]]
input = """
#define add(a, b) a + b
add(1)
"""
messages = [
  "<case>:2:4: `add` expects exactly 2 arguments; found 1"
]

[[suites.phase4.cases]]
input = """
#define add(a, b) a + b
add(1,2,3)
"""
messages = [
  "<case>:2:4: `add` expects exactly 2 arguments; found 3"
]

[[suites.phase4.cases]]
input = """
#define add(a, b) a + b
add(add(1,2), 3)
"""
output = "1 + 2 + 3"

[[suites.phase4.cases]]
input = """
#define add(a, b, ...) a + b
add(1,2,3,4)
"""
output = "1 + 2"

[[suites.phase4.cases]]
input = """
#define test(a, b, ...) __VA_ARGS__
test(1,2,3,4)
"""
output = "3,4"

[[suites.phase4.cases]]
input = """
#define a b
#define m(a) a
a m(1) a
"""
output = "b 1 b"

[[suites.phase4.cases]]
input = """
#define v(...) __VA_ARGS__
v()
v(1)
v(2, 3)
"""
output = "1 2 , 3"

[[suites.phase4.cases]]
input = """
#define v(a, ...) a
v()
v(0)
v(1, 2)
"""
output = "0 1"
messages = []

[[suites.phase4.cases]]
input = """
#define v(a, b, ...) a
v()
v(0)
v(1, 2)
"""
messages = [
  "<case>:2:2: `v` expects at least 2 arguments; found 1",
  "<case>:3:2: `v` expects at least 2 arguments; found 1"
]

[[suites.phase4.cases]]
input = """
#define v(a) a
v()
v(0)
"""
output = "0"
messages = []

# test undef directive

[[suites.phase4.cases]]
input = """
#define a b
a
#undef a
a
"""
output = "b a"

[[suites.phase4.cases]]
input = """
#undef 3
"""
messages = ["<case>:1:8: expected identifier token; found number token"]

[[suites.phase4.cases]]
input = """
#undef 
"""
messages = ["<case>:1:8: expected identifier token; found whitespace token"]

[[suites.phase4.cases]]
input = """
#undef UNDEFINED
"""
messages = ["<case>:1:8: macro `UNDEFINED` does not exist"]

################################################################################
# test cases from the standard
################################################################################

[[suites.phase4.cases]]
input = '''
#define hash_hash # ## #
hash_hash // now our implementation results in ## but not gcc/clang...
a
b hash_hash c // should result in `b ## c`
'''
output = '## a b ## c'

[[suites.phase4.cases]]
# ignored = true
input = '''
#define hash_hash # ## #
#define mkstr(a) # a
#define in_between(a) mkstr(a)
#define join(c, d) in_between(c hash_hash d)
join(x, y) // equivalent to "x ## y"
'''
output = '"x ## y"'

[[suites.phase4.cases]]
input = """
#define m(a) a(w)
#define w 0,1
m(m)
"""
output = "m(0,1)"

[[suites.phase4.cases]]
# ignored = true
input = '''
#define x 3
#define f(a) f(x * (a))
#undef x
#define x 2
#define g f
#define z z[0]
#define h g(\~{ }
#define m(a) a(w)
#define w 0,1
#define t(a) a
#define p() int
#define q(x) x
#define r(x,y) x ## y
#define str(x) # x
f(y+1) + f(f(z)) % t(t(g)(0) + t)(1);
g(x+(3,4)-w) | h 5) & m
      (f)^m(m);
p() i[q()] = { q(1), r(2,3), r(4,), r(,5), r(,) };
char c[2][6] = { str(hello), str() };
'''
output = '''
f(2 * (y+1)) + f(2 * (f(2 * (z[0])))) % f(2 * (0)) + t(1);
f(2 * (2+(3,4)-0,1)) | f(2 * (\~{ } 5)) & f(2 * (0,1))^m(0,1);
int i[] = { 1, 23, 4, 5, };
char c[2][6] = { "hello", "" };
'''

[[suites.phase4.cases]]
input = '''
#define str(s) # s
#define xstr(s) str(s)
#define debug(s, t) printf("x" # s "= %d, x" # t "= %s", \
                           x ## s, x ## t)
#define INCFILE(n) vers ## n
#define glue(a, b) a ## b
#define xglue(a, b) glue(a, b)
#define HIGHLOW "hello"
#define LOW LOW ", world"
debug(1, 2);
fputs(str(strncmp("abc\0d", "abc", '\4') // this goes away
      == 0) str(: @\n), s);
xstr(INCFILE(2).h)
glue(HIGH, LOW);
xglue(HIGH, LOW)
'''
output = '''
printf("x" "1" "= %d, x" "2" "= %s", x1, x2);
fputs(
"strncmp(\"abc\\0d\", \"abc\", '\\4') == 0" ": @\n",
s);
"vers2.h"
"hello";
"hello" ", world"
'''

[[suites.phase4.cases]]
input = '''
#define t(x,y,z) x ## y ## z
int j[] = { t(1,2,3), t(,4,5), t(6,,7), t(8,9,),
            t(10,,),  t(,11,), t(,,12), t(,,) };
'''
output = '''
int j[] = { 123, 45, 67, 89,
            10, 11, 12, };
'''

[[suites.phase4.cases]]
input = '''
#define OBJ_LIKE (1-1)
#define OBJ_LIKE /* white space */ (1-1) /* other */
#define FUNC_LIKE(a) ( a )
#define FUNC_LIKE( a )( /* note the white space */ \
                  a /* other stuff on this line
                  */ )
'''

[[suites.phase4.cases]]
input = '''
#define OBJ_LIKE (1-1)
#define FUNC_LIKE(a) ( a )
#define OBJ_LIKE (0) // different token sequence
#define OBJ_LIKE (1 - 1) // different white space
#define FUNC_LIKE(b) ( a ) // different parameter usage
#define FUNC_LIKE(b) ( b ) // different parameter spelling
'''
messages = [
  "<case>:3:9: macro `OBJ_LIKE` redefined differently",
  "<case>:1:9: macro `OBJ_LIKE` first defined here",
  "<case>:4:9: macro `OBJ_LIKE` redefined differently",
  "<case>:1:9: macro `OBJ_LIKE` first defined here",
  "<case>:5:9: macro `FUNC_LIKE` redefined differently",
  "<case>:2:9: macro `FUNC_LIKE` first defined here",
  "<case>:6:9: macro `FUNC_LIKE` redefined differently",
  "<case>:2:9: macro `FUNC_LIKE` first defined here",
]

[[suites.phase4.cases]]
input = '''
#define debug(...) fprintf(stderr, __VA_ARGS__)
#define showlist(...) puts(#__VA_ARGS__)
#define report(test, ...) ((test)?puts(#test):\
                          printf(__VA_ARGS__))
debug("Flag");
debug("X = %d\n", x);
showlist(The first, second, and third items.);
report(x>y, "x is %d but y is %d", x, y);
'''
output = '''
fprintf(stderr, "Flag" );
fprintf(stderr, "X = %d\n", x );
puts( "The first, second, and third items." );
((x>y)?puts("x>y"):
printf("x is %d but y is %d", x, y));
'''

################################################################################
# Not from the standard
################################################################################

[[suites.phase4.cases]]
input = '''
#define multicat(a,b,c,d) start a ## b ## c ## d end
multicat(,,,)
multicat(,,1,2)
'''
output = 'start end start 12 end'

[[suites.phase4.cases]]
input = """
#define func(a) <a>
func     (1)
func     (
2)
func
(3)
"""
output = "<1> <2> <3>"

[[suites.phase4.cases]]
# ignored = true
input = """
#define multiline(a) yes
multiline (
#ifdef multiline
)
#endif
"""
output = "yes"

[[suites.phase4.case]]
input = """
#define test(a) <a>
test (
#define b 1
  b
)
test (
  c
#define c 2
  c
)
test (
  d
#define d 3
  d
#undef d
)
"""
output = """
<1>
<2 2>
<d d>
"""

[[suites.phase4.case]]
input = """
#define NIL(xxx) xxx
#define G_0(arg) NIL(G_1)(arg)
#define G_1(arg) NIL(arg)
G_0(42)
"""
output = "42"

################################################################################
# Random examples I found online
#
# https://blog.robertelder.org/7-weird-old-things-about-the-c-preprocessor/
# http://archive.is/h2tfN
################################################################################

[[suites.phase4.cases]]
# ignored = true
input = """
#define function() 123
#define concat(a,b) a ## b
concat(func,tion)()
"""
output = "123"

[[suites.phase4.cases]]
input = """
#define open (
#define opena (a
#define openacomma (a,
open
opena
openacomma
"""
output = """
(
(a
(a,
"""

[[suites.phase4.cases]]
input = """
#define boo() 123
#define foo(y) boo y )
#define open (
foo(open)
"""
output = "123"


[[suites.phase4.cases]]
# ignored = true
input = """
#define boo() 123
#define foo(x) x #x

foo(boo())
"""
output = '123 "boo()"'

[[suites.phase4.cases]]
input = """
#define recur4(C, T, E) C-T-E
#define recur3(X) [ X ]
#define recur2(C, X) recur4(C(X), recur4(C(X), ,),) |C|
#define recur1(F, X) F(recur3, X)
recur1(recur2, recur1(recur2, 1))
"""
output = """
[ [ 1 ]-[ 1 ]- - - |recur3| ]-[ [ 1 ]-[ 1 ]- - - |recur3| ]- - - |recur3|
"""

################################################################################
# Test file inclusion
################################################################################

[[suites.phase4.cases]]
input = "#include"
messages = [
  '<case>:1:9: expected `<FILENAME>`, `"FILENAME"`, or a macro that expands to either of those'
]

[[suites.phase4.cases]]
input = "#include 3"
messages = [
  '<case>:1:10: expected `<FILENAME>`, `"FILENAME"`, or a macro that expands to either of those'
]

[[suites.phase4.cases]]
input = """
#define macro 3
#include macro
"""
messages = [
  '<case>:2:10: expected `<FILENAME>`, `"FILENAME"`, or a macro that expands to either of those'
]

[[suites.phase4.cases]]
extra_files.a = "A"
extra_files.b = "B"
input = """
#include <a>
#include <b>
#include <a>
"""
output = "A B A"

[[suites.phase4.cases]]
extra_files.definitions = "#define foo bar"
input = """
#include <definitions>
foo
"""
output = "bar"

# This one may be undefined behavior in future, see WG14 N2324
[[suites.phase4.cases]]
extra_files.macro = """
hmm (
interesting
"""
input = """
#define hmm(a) #a
#include <macro>
)
"""
output = '"interesting"'
messages = []

[[suites.phase4.cases]]
extra_files.a = "#include <b>"
extra_files.b = "#include <c>"
extra_files.c = "#include <a>"
input = "#include <a>"
messages = [
  "c:1:10: maximum nested include depth exceeded",
]

[[suites.phase4.cases]]
input = '#include "a"'
messages = [
  "<case>:1:10: could not include `a`: file not found",
]
ignored = true # TODO NYI System #include paths

[[suites.phase4.cases]]
input = '#include <a>'
messages = [
  "<case>:1:10: could not include `a`: file not found",
]
ignored = true # TODO NYI System #include paths

################################################################################
# Error trails
################################################################################

[[suites.phase4.cases]]
extra_files.invalid = "#define 3"
input = "#include <invalid>"
messages = [
  "invalid:1:9: expected identifier token; found number token"
]

################################################################################
# If directives
################################################################################

[[suites.phase4.cases]]
input = """
#if 1
a
#elif 1
b
#else
c
#endif
"""
output = "a"
ignored = true # TODO NYI

[[suites.phase4.cases]]
input = """
#if 0
a
#elif 1
b
#else
c
#endif
"""
output = "b"
ignored = true # TODO NYI

[[suites.phase4.cases]]
input = """
#if 0
a
#elif 0
b
#else
c
#endif
"""
output = "c"
ignored = true # TODO NYI

[[suites.phase4.cases]]
input = """
#if 0
a
#else
b
#endif
"""
output = "b"
ignored = true # TODO NYI

[[suites.phase4.cases]]
input = """
#ifdef UNDEFINED
a
#else
b
#endif
"""
output = "b"

[[suites.phase4.cases]]
input = """
#define DEFINED
#ifdef DEFINED
a
#else
b
#endif
"""
output = "a"

[[suites.phase4.cases]]
input = """
#ifdef 3
#endif
#ifndef 2
#else
#endif
"""
messages = [
  "<case>:1:8: expected identifier; found number token",
  "<case>:3:9: expected identifier; found number token"
]

[[suites.phase4.cases]]
input = """
#ifdef test /* whitespace */
#endif
#ifdef test // whitespace
#endif
"""

# Test if-directive expressions
[[suites.phase4.cases]]
input = """
#if defined a
1
#endif

#if defined(a)
2
#endif

#if defined ( a )
3
#endif

#define a

#if defined a
4
#endif
#if defined(a)
5
#endif
#if defined ( a )
6
#endif
"""
output = "4 5 6"
ignored = true # TODO NYI

[[suites.phase4.cases]]
input = """
#if defined + a )
#endif

#if defined ( 5 )
#endif

#if defined ( a x
#endif
"""
messages = [
  "<case>:1:13:",
  "<case>:1:13:",
  "<case>:1:13:",
]
ignored = true # TODO NYI
