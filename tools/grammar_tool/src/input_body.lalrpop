// Licensed   under  the   Apache  License,   Version  2.0   <LICENSE-APACHE  or
// http://www.apache.org/licenses/LICENSE-2.0> or  the MIT  license <LICENSE-MIT
// or http://opensource.org/licenses/MIT>, at your option.  This file may not be
// copied, modified, or distributed except according to those terms.

use crate::input_types as types;
grammar;

pub Body: Vec<types::Definition> = Definition* => <>.into_iter().flatten().collect();
Definition: Option<types::Definition> = {
  <name:Identifier> ":" <alternates:Alternates> ";" => Some(types::Definition { name, alternates }),
  r"//[^\n]*" => None,
}
Alternates: Vec<Vec<types::Term>> = <first:Alternate> <rest: ("|" <Alternate>)*> => {
  std::iter::once(first).chain(rest).flatten().collect()
};
Alternate: Option<Vec<types::Term>> = {
  Term+ => Some(<>),
  => Some(vec![]),
  r"//[^\n]*" => None,
}
Term: types::Term = {
  Identifier => types::Term::Identifier(<>),
  r#""[^"]*""# => types::Term::String(<>.to_owned()),
}

Identifier: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_owned();